THINGS WHICH CAN BE ADDED FURTHER INTO PROJECT(Add your contribution to this list after analysig full project):
a.) maximum wrong password attempts allowed=3 to prevent brute force attack.
b.) Automatic deletion of a particular credential file.
c.) check if email and password stored should be of valid syntax.


These are the notes which I made while building this project to understand the concepts used in this project better and to remember it for all my next projects.

1.) while encrypting plain text to encrypted text, we need to convert the regular string("string") to binary literal first(b"string"), and then only we can use encrypt function of fernet to encrypt that binary literal.
    regular string is just a sequence of characters. b prefix indicates that the string is represented as a sequence of bytes rather than a sequence of characters.
2.) also when we decrypt encrypted text, we dont get the regular literal or string directly. we get a binary literal upon using decrypt method of fernet which looks something like this-->b"this is a string".
    This string is not equal to regular string "this is a string" and needs to be converted to regular string.
3.) to convert regular string to binary literal before using encrypt method of fernet in python, we use rstring.encode()
    -->binLitStr=regStr.encode()
    
also to convert binary literal to regular string we use         binLitStr.decode()
    regStr=binLitStr.decode()

4.) ALL THE CHANGES NEEDED TO BE MADE FOR LINUX VERSION
    a.) for linux version, change cls to clear in main.py. because to clear terminal, cls used in windows and clear used in unix/linux

5.) I Wanted to apply as many concept of OOPS as possible in this project, so instead of directly calling a funciton inside another function where both functions belong to same class,  I created a new parent class and put the method which we want to call in another method inside that parent class.
    then we inherit the parent class to child class and now we can call the method which we shifted to parent class inside of methods in child class using super().

    ex- class Child:
            def func1(self):
                pass
            def func2(self):
                pass
            def func3(self):
                func1()-->(here we cant call this as func3 and func1    is same class. so shifting func1 in a parent class to make it callable inside func3 using super())


    ex- class Parent:
            def func1(self):
                pass

        class Child(Parent):
            def func2(self):
                pass
            def func3(self):
                super().func1()

    We have applied this principle by moving primary_security funciton to another parent class called Security instead of keeping it in General class as it can now be called using super method in all the other methods of General class and also can be called individually.






